# -*- coding: utf-8 -*-
"""
Created on Thu Jan 28 00:06:44 2021

@author: leona

Create Stock price generator using Heston Model

Heston model implementation from: https://github.com/cantaro86/Financial-Models-Numerical-Methods

"""


import numpy as np
#import scipy as scp
import scipy.stats as ss
import matplotlib.pyplot as plt


def heston_stock_price_generation(seed,N = 10000,paths = 5,S0 = 100,v0 = 0.04,
                                  mu = 0.1,rho = -0.2,kappa = 2,theta = 0.04,sigma = 0.3,
                                  batch_size = 8192, print_on = False):
    """
    

    Parameters
    ----------
    N : TYPE, non-optional
        Time steps. The default is 10000.
    paths : TYPE, non-optional
        number of paths. The default is 5.
    S0 : TYPE, non-optional
        spot price. The default is 100.
    v0 : TYPE, non-optional
        spot variance. The default is 0.04.
    mu : TYPE, non-optional
        drift. The default is 0.1.
    rho : TYPE, non-optional
        correlation coefficient. The default is -0.2.
    kappa : TYPE, non-optional
        mean reversion coefficient. The default is 2.
    theta : TYPE, non-optional
        long-term variance. The default is 0.04.
    sigma : TYPE, non-optional
        Vol of Vol - Volatility of instantaneous variance. The default is 0.3.
    print_on : TYPE, non-optional
        mark 'True' to print the graphics for volotility and stock price. The default is False.

    Returns
    -------
    X : TYPE
        Stock price generate by the Heston model.
    Y : TYPE
        Stock volatility generate by the Heston model.
    
    
    Resources:
    --------
    
    Heston model implementation from: https://github.com/cantaro86/Financial-Models-Numerical-Methods

    """
    np.random.seed(seed) 
    
    #Declare mode variables:
    
    #N = 10000             # time steps 
    #paths = 5               # number of paths
    T = 1
    T_vec, dt = np.linspace(0,T,N, retstep=True )
    dt_sq = np.sqrt(dt)
    
    #S0 = 100          # spot price
    X0 = np.log(S0)   # log price
    #v0 = 0.04         # spot variance
    Y0 = np.log(v0)   # log-variance 
    
    #mu = 0.1                                           # drift
    #rho = -0.2                                         # correlation coefficient
    #kappa = 2                                          # mean reversion coefficient
    #theta = 0.04                                       # long-term variance
    #sigma = 0.3                                        # Vol of Vol - Volatility of instantaneous variance
    std_asy = np.sqrt( theta * sigma**2 /(2*kappa) )   # asymptotic standard deviation for the CIR process
    assert(2*kappa * theta > sigma**2)                 # Feller condition
    
    # Generate random Brownian Motion
    MU = np.array([0, 0])
    COV = np.matrix([[1, rho], [rho, 1]])
    W_vec = []
    for i in range(0,batch_size):
        W_vec.append(ss.multivariate_normal.rvs( mean=MU, cov=COV, size=(paths,N-1)))
    W = np.stack(W_vec)
    if paths<2:
        W = np.expand_dims(W,3)
    W_S = W[:,:,:,0]   # Stock Brownian motion:     W_1
    W_v = W[:,:,:,1]   # Variance Brownian motion:  W_2
    
    # Initialize vectors
    Y = np.zeros((batch_size,paths,N))
    Y[:,:,0] = Y0
    X = np.zeros((batch_size,paths,N))
    X[:,:,0] = X0
    v = np.zeros(N)
    
    for t in range(0,N-1):
        v = np.exp(Y[:,:,t])    # variance 
        v_sq = np.sqrt(v)     # square root of variance 
        
        Y[:,:,t+1] = Y[:,:,t] + (1/v)*( kappa*(theta - v) - 0.5*sigma**2 )*dt + sigma * (1/v_sq) * dt_sq * W_v[:,:,t]   
        X[:,:,t+1] = X[:,:,t] + (mu - 0.5*v)*dt + v_sq * dt_sq * W_S[:,:,t]
        
    #X is the stock price generate by the Heston model
    #Y is de the variance of the stock price generated by the Heston model
    
    #Print
    if print_on == True:
        fig = plt.figure(figsize=(16,5))
        ax1 = fig.add_subplot(121); ax2 = fig.add_subplot(122)
        
        ax1.plot(T_vec, np.exp(X.T) )
        ax1.set_title("Heston model, Stock process. 4 paths"); ax1.set_xlabel("Time"); ax1.set_ylabel("Stock")
        ax2.plot(T_vec, np.exp(Y.T) )
        ax2.set_title("Heston model, Variance process. 4 paths"); ax2.set_xlabel("Time"); ax2.set_ylabel("Variance")
        ax2.plot(T_vec, (theta + std_asy)*np.ones_like(T_vec), label="1 asymptotic std dev", color="black" )
        ax2.plot(T_vec, (theta - std_asy)*np.ones_like(T_vec), color="black" )
        ax2.plot(T_vec, theta*np.ones_like(T_vec), label="Long term mean" )
        ax2.legend(loc="upper right"); 
        plt.show()

    return np.exp(X),np.exp(Y) #Stock price, Stock volatility
